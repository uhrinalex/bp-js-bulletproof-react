imporJe potrebné pripomenúť, že v kontexte jazykov JavaScript a TypeScript neexistuje priame pretypovanie ako v iných programovacích jazykoch, keďže v prehliadači už beží skompilovaný kód bez
% akýchkoľvek informácií o typoch. V prípade TypeScriptu sa typové anotácie z kódu odstránia a vykonávaný je kód v natívnom JavaScripte, ako pipisujem v oddiele \ref{section:semanticka_analyza}. V prípade využitia typových anotácií JSDoc sú
% informácie o typoch v komentároch a tie sú pri vykonávaní kódu prehliadačom ignorované. V kontexte týchto jazykov sa dá pretypovanie chápať skôr ako definovanie očakávaného typu,
% čo umožňuje vývojárom lepšie chápať štruktúru kódu.
t { Meta, Story } from '@storybook/react';

import { {{ properCase name }} } from './{{ properCase name }}';

const meta: Meta = {
  title: 'Components/{{ properCase name }}',
  component: {{ properCase name }},
  parameters: {
    controls: { expanded: true },
  },
};

export default meta;

const Template: Story = (props) => <{{ properCase name }} {...props}>Hello</{{ properCase name }}>;

export const Default = Template.bind({});
Default.args = {};
